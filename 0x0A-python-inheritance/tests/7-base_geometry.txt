This file test BaseGeometry class of 7-base_geometry.py.

::

	>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
	>>> bg = BaseGeometry()
	>>> bg.integer_validator("an_int", 44)
	>>> try:
	... 	bg.integer_validator("an_int", -5)
	... except Exception as e:
	... 	print("[{}] {}".format(e.__class__.__name__, e))
	[ValueError] an_int must be greater than 0
	>>> try:
        ...     bg.integer_validator("an_int", 0)
        ... except Exception as e:
        ...     print("[{}] {}".format(e.__class__.__name__, e))
	[ValueError] an_int must be greater than 0
	>>> try:
        ...     bg.integer_validator("an_int", 2.2)
        ... except Exception as e:
        ...     print("[{}] {}".format(e.__class__.__name__, e))
	[TypeError] an_int must be an integer
	>>> try:
        ...     bg.integer_validator("an_int", "damn")
        ... except Exception as e:
        ...     print("[{}] {}".format(e.__class__.__name__, e))
	[TypeError] an_int must be an integer
	>>> try:
        ...     bg.integer_validator("an_int", None)
        ... except Exception as e:
        ...     print("[{}] {}".format(e.__class__.__name__, e))
	[TypeError] an_int must be an integer
	>>> try:
        ...     bg.area()
        ... except Exception as e:
        ...     print("[{}] {}".format(e.__class__.__name__, e))
	[Exception] area() is not implemented
	>>> try:
        ...     bg.integer_validator("", -2)
        ... except Exception as e:
        ...     print("[{}] {}".format(e.__class__.__name__, e))
	[ValueError]  must be greater than 0
	>>> try:
        ...     bg.integer_validator("", 22)
        ... except Exception as e:
        ...     print("[{}] {}".format(e.__class__.__name__, e))
	>>> from math import inf
	>>> try:
        ...     bg.integer_validator("an_int", float(inf))
        ... except Exception as e:
        ...     print("[{}] {}".format(e.__class__.__name__, e))
	[TypeError] an_int must be an integer
	>>> from math import nan
	>>> try:
        ...     bg.integer_validator("an_int", float(nan))
        ... except Exception as e:
        ...     print("[{}] {}".format(e.__class__.__name__, e))
	[TypeError] an_int must be an integer
	>>> m = __import__("7-base_geometry").__doc__
	>>> len(m) > 1
	True
	>>> t = __import__("7-base_geometry").BaseGeometry.__doc__
        >>> len(t) > 1
        True
	>>> d = __import__("7-base_geometry").BaseGeometry.area.__doc__
        >>> len(d) > 1
        True
	>>> x = __import__("7-base_geometry").BaseGeometry.integer_validator.__doc__
        >>> len(x) > 1
        True
